

import 'package:flutter/material.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;
import 'package:intl/intl.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

void main() => runApp(const MyApp());


class User {
  final String name;
  final int age;
  final String healthCard;
  final String sex;
  final String birthDate;
  final String password;

  User({
    required this.name,
    required this.age,
    required this.healthCard,
    required this.sex,
    required this.birthDate,
    required this.password,
  });
}


class UserManager {
  static User? registeredUser;
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Medical App',
      theme: ThemeData(
        colorSchemeSeed: Colors.teal,
        useMaterial3: true,
        brightness: Brightness.light,
      ),
      darkTheme: ThemeData(
        colorSchemeSeed: Colors.teal,
        useMaterial3: true,
        brightness: Brightness.dark,
      ),
      home: const LoginPage(),
    );
  }
}

class LoginPage extends StatefulWidget {
  const LoginPage({super.key});

  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController _healthCardController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  void _login(BuildContext context) {
    final hc = _healthCardController.text.trim();
    final pwd = _passwordController.text.trim();
    final user = UserManager.registeredUser;
    if (user != null &&
        user.healthCard == hc &&
        user.password == pwd) {

      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (_) => const HomeScreen()),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('健保卡或密碼錯誤')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:
      AppBar(title: const Text('Login'), backgroundColor: Colors.teal),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          children: [
            const SizedBox(height: 40),
            Icon(Icons.medical_services, size: 100, color: Colors.teal),
            const SizedBox(height: 20),
            TextField(
              controller: _healthCardController,
              decoration: InputDecoration(
                labelText: '健保卡號', // 中文輸入
                prefixIcon: const Icon(Icons.credit_card),
                border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: InputDecoration(
                labelText: '密碼',
                prefixIcon: const Icon(Icons.lock),
                border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () => _login(context),
              style: ElevatedButton.styleFrom(
                minimumSize: const Size.fromHeight(50),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16)),
                backgroundColor: Colors.teal,
              ),
              child: const Text('Login',
                  style: TextStyle(fontWeight: FontWeight.bold)),
            ),
            const SizedBox(height: 12),
            TextButton(
              onPressed: () => Navigator.push(
                context,
                MaterialPageRoute(builder: (_) => const SignupPage()),
              ),
              child: const Text(
                '還沒有帳號？點此註冊',
                style: TextStyle(color: Colors.teal),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// Signup Page（註冊頁面）
class SignupPage extends StatefulWidget {
  const SignupPage({super.key});

  @override
  _SignupPageState createState() => _SignupPageState();
}

class _SignupPageState extends State<SignupPage> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _sexController = TextEditingController();
  final TextEditingController _ageController = TextEditingController();
  final TextEditingController _healthCardController = TextEditingController();
  final TextEditingController _birthDateController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  /// 彈出日期選擇器，選擇出生日期並顯示在輸入框
  Future<void> _pickBirthDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );
    if (picked != null) {
      final formatted = DateFormat('yyyy-MM-dd').format(picked);
      _birthDateController.text = formatted;
    }
  }

  /// 註冊流程：將使用者資料送到後端，後端會在 MySQL 中建立使用者專屬資料表
  Future<void> _signup(BuildContext context) async {
    final name = _nameController.text.trim();
    final sex = _sexController.text.trim();
    final age = int.tryParse(_ageController.text.trim()) ?? 0;
    final healthCard = _healthCardController.text.trim();
    final birthDate = _birthDateController.text.trim();
    final password = _passwordController.text.trim();

    if (name.isEmpty ||
        sex.isEmpty ||
        age <= 0 ||
        healthCard.isEmpty ||
        birthDate.isEmpty ||
        password.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('請填寫所有欄位')),
      );
      return;
    }

    // 建立 User 物件暫存到記憶體
    final user = User(
      name: name,
      sex: sex,
      age: age,
      healthCard: healthCard,
      birthDate: birthDate,
      password: password,
    );
    UserManager.registeredUser = user;

    try {
      // 向後端發送註冊請求（請根據後端實際部署位置調整 URL，Android 模擬器使用 10.0.2.2）
      final uri = Uri.parse('http://172.20.10.8:5000/signup');
      final body = jsonEncode({
        'name': name,
        'sex': sex,
        'age': age,
        'healthCard': healthCard,
        'birthDate': birthDate,
        'password': password,
      });
      final response = await http.post(
        uri,
        headers: {'Content-Type': 'application/json'},
        body: body,
      );

      if (response.statusCode == 200) {
        // 註冊成功，導回 Login 頁面
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('註冊成功，請重新登入')),
        );
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (_) => const LoginPage()),
        );
      } else {
        // 後端回傳錯誤
        String errmsg = "註冊失敗";
        try {
          final respData = jsonDecode(response.body);
          if (respData['error'] != null) {
            errmsg = respData['error'];
          } else {
            errmsg = '註冊失敗：${response.statusCode}';
          }
        } catch (_) {
          errmsg = '註冊失敗：${response.statusCode}';
        }
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errmsg)),
        );
      }
    } catch (e) {
      // 網路或例外錯誤
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('註冊請求失敗：$e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:
      AppBar(title: const Text('Sign Up'), backgroundColor: Colors.teal),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24),
        child: Column(
          children: [
            const SizedBox(height: 20),
            // 名字用中文輸入
            TextField(
              controller: _nameController,
              decoration: InputDecoration(
                labelText: '姓名 (中文)',
                prefixIcon: const Icon(Icons.person),
                border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _sexController,
              decoration: InputDecoration(
                labelText: '性別',
                prefixIcon: const Icon(Icons.transgender),
                border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _ageController,
              keyboardType: TextInputType.number,
              decoration: InputDecoration(
                labelText: '年齡',
                prefixIcon: const Icon(Icons.calendar_today),
                border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _healthCardController,
              decoration: InputDecoration(
                labelText: '健保卡號',
                prefixIcon: const Icon(Icons.credit_card),
                border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _birthDateController,
              readOnly: true,
              decoration: InputDecoration(
                labelText: '出生日期 (選擇)',
                prefixIcon: const Icon(Icons.cake),
                border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
              ),
              onTap: () => _pickBirthDate(context),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _passwordController,
              obscureText: true,
              decoration: InputDecoration(
                labelText: '密碼',
                prefixIcon: const Icon(Icons.lock),
                border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(16)),
              ),
            ),
            const SizedBox(height: 24),
            ElevatedButton(
              onPressed: () => _signup(context),
              style: ElevatedButton.styleFrom(
                minimumSize: const Size.fromHeight(50),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16)),
                backgroundColor: Colors.teal,
              ),
              child: const Text('Sign Up',
                  style: TextStyle(fontWeight: FontWeight.bold)),
            ),
          ],
        ),
      ),
    );
  }
}

/// HomeScreen（登入後的主頁）
// 顯示使用者基本資訊，並提供「拍照掃描藥單」、「開啟相簿」、「查看已儲存的藥物資訊」、「登出」按鈕
class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final user = UserManager.registeredUser;

    return Scaffold(
      appBar:
      AppBar(title: const Text('Medical Profile'), backgroundColor: Colors.teal),
      body: Padding(
        padding: const EdgeInsets.all(24),
        child: ListView(
          children: [
            // 顯示個人資訊卡片
            Card(
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16)),
              elevation: 4,
              shadowColor: Colors.black.withOpacity(0.1),
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  children: [
                    Text(
                      user?.name ?? '',
                      style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                        fontWeight: FontWeight.bold,
                        color: Colors.teal,
                      ),
                    ),
                    const SizedBox(height: 8),
                    const Divider(),
                    _buildInfoRow('健保卡號', user?.healthCard ?? ''),
                    const Divider(),
                    _buildInfoRow('性別', user?.sex ?? ''),
                    const Divider(),
                    _buildInfoRow('年齡', user?.age.toString() ?? ''),
                    const Divider(),
                    _buildInfoRow('出生日期', user?.birthDate ?? ''),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 24),
            // 拍照掃描藥單
            _buildRoundedButton(
                context,
                Icons.camera_alt_outlined,
                'Capture Image',
                const SaveImageScreen()),

            const SizedBox(height: 12),
            // 檢視相簿
            _buildRoundedButton(
                context, Icons.photo_library_outlined, 'Open Gallery', const GalleryScreen()),

            const SizedBox(height: 12),
            // 新增：查看已儲存的藥物資訊
            _buildRoundedButton(
                context,
                Icons.list_alt,
                '查看已儲存的藥物資訊',
                const SavedDrugsScreen()),

            const SizedBox(height: 12),
            // 登出
            TextButton.icon(
              onPressed: () => Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(builder: (_) => const LoginPage()),
                    (route) => false,
              ),
              icon: const Icon(Icons.logout, color: Colors.teal),
              label: const Text('Logout', style: TextStyle(color: Colors.teal)),
            ),
          ],
        ),
      ),
    );
  }

  // 建立資訊列（標籤 + 值）
  Widget _buildInfoRow(String label, String value) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, style: const TextStyle(color: Colors.grey)),
        Text(value, style: const TextStyle(fontWeight: FontWeight.bold)),
      ],
    );
  }

  // 通用圓角按鈕
  Widget _buildRoundedButton(
      BuildContext context, IconData icon, String label, Widget screen) {
    return ElevatedButton.icon(
      onPressed: () => Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => screen),
      ),
      icon: Icon(icon),
      label: Text(label),
      style: ElevatedButton.styleFrom(
        minimumSize: const Size.fromHeight(48),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        backgroundColor: Colors.teal,
      ),
    );
  }
}

/// SaveImageScreen：負責觸發相機拍照
class SaveImageScreen extends StatelessWidget {
  const SaveImageScreen({super.key});

  /// 拍照並跳轉到 ViewImageScreen 顯示照片
  Future<void> _takePhoto(BuildContext context) async {
    final picker = ImagePicker();
    final pickedFile = await picker.pickImage(source: ImageSource.camera);

    if (pickedFile != null) {
      final image = File(pickedFile.path);
      Navigator.push(
        context,
        MaterialPageRoute(
          builder: (_) => ViewImageScreen(image: image),
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No photo taken')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        appBar:
        AppBar(title: const Text('Take Photo'), backgroundColor: Colors.teal),
        body: Center(
          child: ElevatedButton(
            onPressed: () => _takePhoto(context),
            style: ElevatedButton.styleFrom(
              minimumSize: const Size.fromHeight(48),
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
              backgroundColor: Colors.teal,
            ),
            child: const Text('Take Photo', style: TextStyle(fontWeight: FontWeight.bold)),
          ),
        ));
  }
}

/// ViewImageScreen：顯示剛拍攝的照片，提供「藥單資訊」與「重拍」按鈕
class ViewImageScreen extends StatelessWidget {
  final File image;
  const ViewImageScreen({super.key, required this.image});

  /// 重拍（返回上一頁）
  void _retakePhoto(BuildContext context) {
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:
      AppBar(title: const Text('View Photo'), backgroundColor: Colors.teal),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // 顯示照片
            Image.file(image, height: 300, fit: BoxFit.cover),
            const SizedBox(height: 20),
            // 「藥單資訊」按鈕：點擊後跳轉到 DrugInfoScreen，並將照片傳遞過去
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (_) => DrugInfoScreen(imageFile: image),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                minimumSize: const Size(140, 48),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                backgroundColor: Colors.teal,
              ),
              child: const Text('藥單資訊', style: TextStyle(fontWeight: FontWeight.bold)),
            ),
            const SizedBox(height: 20),
            // 「重拍」按鈕
            ElevatedButton(
              onPressed: () => _retakePhoto(context),
              style: ElevatedButton.styleFrom(
                minimumSize: const Size(140, 48),
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                backgroundColor: Colors.red,
              ),
              child: const Text('重拍', style: TextStyle(fontWeight: FontWeight.bold)),
            ),
          ],
        ),
      ),
    );
  }
}

/// DrugInfoScreen：將照片上傳後端，顯示比對到的藥物資訊，並提供「儲存資訊」按鈕
class DrugInfoScreen extends StatefulWidget {
  final File imageFile;
  const DrugInfoScreen({super.key, required this.imageFile});

  @override
  _DrugInfoScreenState createState() => _DrugInfoScreenState();
}

class _DrugInfoScreenState extends State<DrugInfoScreen> {
  List<dynamic> matchedDrugs = [];
  bool isLoading = true;
  bool saveCompleted = false;

  @override
  void initState() {
    super.initState();
    _uploadAndRecognize();
  }

  /// 將照片上傳到後端 /scan，並接收匹配到的藥物資訊
  Future<void> _uploadAndRecognize() async {
    final user = UserManager.registeredUser;
    if (user == null) return;

    setState(() {
      isLoading = true;
    });

    try {
      // 後端 URL，請根據實際部署位置修改，模擬器用 10.0.2.2
      final uri = Uri.parse('http://172.20.10.8:5000/scan');
      final request = http.MultipartRequest('POST', uri);

      // 添加需辨識的圖片檔案
      request.files.add(await http.MultipartFile.fromPath(
          'image', widget.imageFile.path,
          filename: path.basename(widget.imageFile.path)));

      // 傳遞使用者健保卡，後端用來知道要將結果存到哪個專屬資料表
      request.fields['healthCard'] = user.healthCard;

      final response = await request.send();
      final respStr = await response.stream.bytesToString();

      if (response.statusCode == 200) {
        final data = jsonDecode(respStr);
        setState(() {
          matchedDrugs = data['matchedDrugs'] ?? [];
          isLoading = false;
        });
      } else {
        setState(() {
          isLoading = false;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('比對失敗：${response.statusCode} $respStr')),
        );
      }
    } catch (e) {
      setState(() {
        isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('OCR 請求失敗：$e')),
      );
    }
  }

  /// 按下「儲存資訊」時，向後端 /save 請求，後端會將 matchedDrugs 存入使用者專屬資料表
  Future<void> _saveDrugs() async {
    final user = UserManager.registeredUser;
    if (user == null) return;
    if (matchedDrugs.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('沒有可儲存的藥物資訊')),
      );
      return;
    }

    try {
      final uri = Uri.parse('http://172.20.10.8:5000/save');
      final body = jsonEncode({
        'healthCard': user.healthCard,
        'matchedDrugs': matchedDrugs,
      });
      final response = await http.post(
        uri,
        headers: {'Content-Type': 'application/json'},
        body: body,
      );

      if (response.statusCode == 200) {
        setState(() {
          saveCompleted = true;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('藥物資訊已儲存')),
        );
      } else {
        String errmsg = '儲存失敗';
        try {
          final respData = jsonDecode(response.body);
          if (respData['error'] != null) {
            errmsg = respData['error'];
          } else {
            errmsg = '儲存失敗：${response.statusCode}';
          }
        } catch (_) {
          errmsg = '儲存失敗：${response.statusCode}';
        }
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errmsg)),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('儲存請求失敗：$e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('藥物比對結果'),
        backgroundColor: Colors.teal,
      ),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            // 若 matchedDrugs 為空，顯示「未匹配到任何藥物」
            if (matchedDrugs.isEmpty)
              const Center(child: Text('未匹配到任何藥物'))
            else
              Expanded(
                child: ListView.builder(
                  itemCount: matchedDrugs.length,
                  itemBuilder: (context, index) {
                    final drug = matchedDrugs[index];
                    return Card(
                      shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12)),
                      elevation: 2,
                      child: Padding(
                        padding: const EdgeInsets.all(12),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text('藥品名稱：${drug['name']}',
                                style: const TextStyle(
                                    fontWeight: FontWeight.bold)),
                            const SizedBox(height: 4),
                            Text('ID：${drug['ID']}'),
                            const SizedBox(height: 4),
                            Text('Usage：${drug['usage']}'),
                            const SizedBox(height: 4),
                            Text('Dosage：${drug['dosage']}'),
                            const SizedBox(height: 4),
                            Text('Frequency：${drug['frequency']}'),
                            const SizedBox(height: 4),
                            Text('Indication：${drug['indication']}'),
                          ],
                        ),
                      ),
                    );
                  },
                ),
              ),
            const SizedBox(height: 12),
            // 按鈕：將 matchedDrugs 儲存到資料庫
            ElevatedButton(
              onPressed: saveCompleted ? null : () => _saveDrugs(),
              style: ElevatedButton.styleFrom(
                minimumSize: const Size.fromHeight(48),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16)),
                backgroundColor:
                saveCompleted ? Colors.grey : Colors.teal,
              ),
              child: Text(
                saveCompleted ? '已儲存' : '儲存資訊',
                style: const TextStyle(fontWeight: FontWeight.bold),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

/// SavedDrugsScreen：顯示使用者專屬資料表中的已儲存藥物資訊
class SavedDrugsScreen extends StatefulWidget {
  const SavedDrugsScreen({super.key});

  @override
  _SavedDrugsScreenState createState() => _SavedDrugsScreenState();
}

class _SavedDrugsScreenState extends State<SavedDrugsScreen> {
  List<dynamic> savedDrugs = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchSavedDrugs();
  }

  /// 從後端 /drugs 取得目前使用者的已儲存藥物列表
  Future<void> _fetchSavedDrugs() async {
    final user = UserManager.registeredUser;
    if (user == null) return;

    setState(() {
      isLoading = true;
    });

    try {
      final uri = Uri.parse(
          'http://172.20.10.8:5000/drugs?healthCard=${user.healthCard}');
      final response = await http.get(uri);

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        setState(() {
          savedDrugs = data['savedDrugs'] ?? [];
          isLoading = false;
        });
      } else {
        setState(() {
          isLoading = false;
        });
        String errmsg = '載入已儲存藥物失敗';
        try {
          final respData = jsonDecode(response.body);
          if (respData['error'] != null) {
            errmsg = respData['error'];
          } else {
            errmsg = '載入已儲存藥物失敗：${response.statusCode}';
          }
        } catch (_) {
          errmsg = '載入已儲存藥物失敗：${response.statusCode}';
        }
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(errmsg)),
        );
      }
    } catch (e) {
      setState(() {
        isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Get 已儲存藥物請求失敗：$e')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:
      AppBar(title: const Text('已儲存藥物資訊'), backgroundColor: Colors.teal),
      body: isLoading
          ? const Center(child: CircularProgressIndicator())
          : Padding(
        padding: const EdgeInsets.all(16),
        child: savedDrugs.isEmpty
            ? const Center(child: Text('尚未儲存任何藥物資訊'))
            : ListView.builder(
          itemCount: savedDrugs.length,
          itemBuilder: (context, index) {
            final drug = savedDrugs[index];
            return Card(
              shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12)),
              elevation: 2,
              child: Padding(
                padding: const EdgeInsets.all(12),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text('藥品名稱：${drug['drug_name']}',
                        style: const TextStyle(
                            fontWeight: FontWeight.bold)),
                    const SizedBox(height: 4),
                    Text('ID：${drug['ID']}'),
                    const SizedBox(height: 4),
                    Text('Usage：${drug['usage']}'),
                    const SizedBox(height: 4),
                    Text('Dosage：${drug['dosage']}'),
                    const SizedBox(height: 4),
                    Text('Frequency：${drug['frequency']}'),
                    const SizedBox(height: 4),
                    Text('Indication：${drug['indication']}'),
                    const SizedBox(height: 4),
                    Text('掃描時間：${drug['scanned_at']}'),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

/// GalleryScreen：顯示已儲存在裝置中的照片
class GalleryScreen extends StatefulWidget {
  const GalleryScreen({super.key});

  @override
  _GalleryScreenState createState() => _GalleryScreenState();
}

class _GalleryScreenState extends State<GalleryScreen> {
  List<XFile> _images = [];

  @override
  void initState() {
    super.initState();
    _loadImages();
  }

  /// 載入裝置文件目錄中的照片
  Future<void> _loadImages() async {
    final appDir = await getApplicationDocumentsDirectory();
    final files = Directory(appDir.path).listSync();
    setState(() {
      _images = files
          .where((f) =>
      f.path.endsWith('.jpg') || f.path.endsWith('.png'))
          .map((f) => XFile(f.path))
          .toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:
      AppBar(title: const Text('Gallery'), backgroundColor: Colors.teal),
      body: _images.isEmpty
          ? const Center(child: Text('No images found'))
          : GridView.builder(
        padding: const EdgeInsets.all(8),
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          crossAxisSpacing: 8,
          mainAxisSpacing: 8,
        ),
        itemCount: _images.length,
        itemBuilder: (context, index) {
          final file = File(_images[index].path);
          return Stack(
            children: [
              Positioned.fill(
                child: GestureDetector(
                  onTap: () async {
                    final deleted = await Navigator.push<bool>(
                      context,
                      MaterialPageRoute(
                        builder: (_) => FullImageScreen(image: file),
                      ),
                    );
                    if (deleted == true) {
                      _loadImages();
                    }
                  },
                  child: Image.file(file, fit: BoxFit.cover),
                ),
              ),
              Positioned(
                right: 8,
                top: 8,
                child: GestureDetector(
                  onTap: () {
                    file.deleteSync();
                    _loadImages();
                  },
                  child: const Icon(
                    Icons.delete,
                    color: Colors.red,
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}

/// FullImageScreen：顯示單張照片並可刪除
class FullImageScreen extends StatelessWidget {
  final File image;
  const FullImageScreen({super.key, required this.image});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:
      AppBar(title: const Text('Full Image'), backgroundColor: Colors.teal),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.file(image),
            const SizedBox(height: 20),
            ElevatedButton.icon(
              onPressed: () {
                image.deleteSync();
                Navigator.pop(context, true);
              },
              icon: const Icon(Icons.delete),
              label: const Text('Delete'),
              style: ElevatedButton.styleFrom(
                minimumSize: const Size(120, 48),
                shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(16)),
                backgroundColor: Colors.red,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
