# server.py
# 此檔是後端 Flask 應用，負責：
# 1. /signup 路由：接收註冊請求，在 MySQL 建立使用者專屬表格（一次註冊後不可重複建立）。
# 2. /scan 路由：接收傳入的藥單照片，使用 Azure OCR 比對 medicines 表，回傳 matchedDrugs 清單。
# 3. /save 路由：接收 matchedDrugs 與 healthCard，將結果存入該使用者專屬表格。
# 4. /drugs 路由：接收 healthCard 參數，回傳該使用者專屬表格所有紀錄。

from flask import Flask, request, jsonify
import mysql.connector
import difflib
import requests
import time
import os
import tempfile
from werkzeug.utils import secure_filename

app = Flask(__name__)

# MySQL 連線設定，請自行修改帳號、密碼
db_config = {
    "host": "localhost",
    "user": "root",
    "password": "danny0409",
    "database": "medical_db",
    "charset": "utf8mb4"
}

# Azure OCR 設定
AZURE_ENDPOINT = "https://my-computer-vision-api.cognitiveservices.azure.com/"
AZURE_API_KEY = "F9f4f4ItuNfMt4m51ud5nkcpMsvPpQrrGsRfWKAzQMVcBYmVQr1UJQQJ99BCACYeBjFXJ3w3AAAAACOGQfJf"
READ_URL = f"{AZURE_ENDPOINT}vision/v3.2/read/analyze"

# 允許上傳的照片副檔名
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg'}


def allowed_file(filename):
    """檢查上傳檔案是否為允許的格式"""
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS


@app.route('/signup', methods=['POST'])
def signup():
    """
    註冊路由：
    - 接收 JSON：name, sex, age, healthCard, birthDate, password
    - 先檢查 user_<healthCard> 表是否已存在，若存在回錯
    - 否則建立使用者專屬資料表
    """
    data = request.get_json()
    name = data.get('name')
    sex = data.get('sex')
    age = data.get('age')
    healthCard = data.get('healthCard')
    birthDate = data.get('birthDate')
    password = data.get('password')

    if not all([name, sex, age, healthCard, birthDate, password]):
        return jsonify({"error": "請提供完整註冊資料"}), 400

    # 表格名稱使用 "user_<健保卡號>"
    table_name = f"user_{healthCard}"

    # 連接 MySQL
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()

    try:
        # 1. 先檢查該表是否已存在（若存在，代表此健保卡已註冊）
        check_sql = """
            SELECT COUNT(*)
            FROM information_schema.tables
            WHERE table_schema = %s
              AND table_name = %s
        """
        cursor.execute(check_sql, (db_config["database"], table_name))
        exists_count = cursor.fetchone()[0]

        if exists_count > 0:
            # 已經存在同名表，視為此健保卡已註冊
            return jsonify({"error": "此帳號 (健保卡) 已註冊，請直接登入"}), 400

        # 2. 若不存在，則建立使用者專屬資料表
        #    欄位：自動編碼 id、藥品名稱 drug_name、drug_id、用法 drug_usage、劑量 drug_dosage、
        #          頻率 frequency、適應症 indication、掃描時間 scanned_at
        create_table_sql = f"""
        CREATE TABLE `{table_name}` (
            `id` INT AUTO_INCREMENT PRIMARY KEY,
            `drug_name` VARCHAR(255),
            `drug_id` INT,
            `drug_usage` TEXT,
            `drug_dosage` VARCHAR(255),
            `frequency` VARCHAR(255),
            `indication` TEXT,
            `scanned_at` DATETIME DEFAULT CURRENT_TIMESTAMP
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
        """
        cursor.execute(create_table_sql)
        conn.commit()

    except Exception as e:
        conn.rollback()
        return jsonify({"error": f"建立專屬資料表失敗：{e}"}), 500

    finally:
        cursor.close()
        conn.close()

    return jsonify({"message": "註冊並建立專屬表格成功"}), 200


@app.route('/scan', methods=['POST'])
def scan():
    """
    /scan 路由：
    - 接收 multipart/form-data：image 檔案 (藥單照片)、healthCard
    - 將照片存放於伺服器暫存、呼叫 Azure OCR API 進行辨識
    - 解析 OCR 結果，將文字內容與 medicines 表進行比對 (精確或模糊比對)
    - 回傳 JSON 格式 matchedDrugs 清單，包括 name, ID, usage, dosage, frequency, indication
    """
    if 'image' not in request.files or 'healthCard' not in request.form:
        return jsonify({"error": "缺少 image 或 healthCard 參數"}), 400

    file = request.files['image']
    healthCard = request.form['healthCard'].strip()

    if file.filename == '':
        return jsonify({"error": "未選擇檔案"}), 400
    if not allowed_file(file.filename):
        return jsonify({"error": "不支援的檔案格式"}), 400

    # 將檔案暫時存到 /tmp 資料夾
    filename = secure_filename(file.filename)
    tmp_path = os.path.join(os.getcwd(),'temp_'+ filename)
    file.save(tmp_path)

    # 讀取圖片並轉為灰階存為 processed.jpg
    try:
        import cv2
        import tempfile
        tmp_dir = tempfile.gettempdir()
        processed_path = os.path.join(tmp_dir,'processed.jpg')
        img = cv2.imread(tmp_path)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        cv2.imwrite(processed_path, gray)
    except Exception as e:
        return jsonify({"error": f"圖像處理失敗：{e}"}), 500

    # 呼叫 Azure OCR API
    headers = {
        "Ocp-Apim-Subscription-Key": AZURE_API_KEY,
        "Content-Type": "application/octet-stream"
    }
    params = {"language": "zh-Hant", "model-version": "latest"}
    try:
        with open(processed_path, "rb") as f:
            resp = requests.post(READ_URL, headers=headers, params=params, data=f)
    except Exception as e:
        return jsonify({"error": f"OCR API 呼叫失敗：{e}"}), 500

    if resp.status_code != 202:
        return jsonify({"error": f"OCR API 回傳非預期狀態碼：{resp.status_code}"}), 500

    # 等待 OCR 結果完成
    op_url = resp.headers.get("Operation-Location")
    if not op_url:
        return jsonify({"error": "無法取得 Operation-Location"}), 500

    while True:
        r = requests.get(op_url, headers={"Ocp-Apim-Subscription-Key": AZURE_API_KEY})
        j = r.json()
        status = j.get("status")
        if status == "succeeded":
            break
        elif status == "failed":
            return jsonify({"error": "OCR 辨識失敗"}), 500
        time.sleep(1)

    # 解析 OCR 文字
    lines = []
    for page in j["analyzeResult"]["readResults"]:
        for line in page["lines"]:
            lines.append(line["text"])
    ocr_text = "\n".join(lines).upper()

    # 連接 MySQL，讀取 medicines 表中的 name 欄位
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT `name`, `ID`, `usage`, `dosage`, `frequency`, `indication` FROM `medicines`")
    medicines = cursor.fetchall()  # List of dict
    cursor.close()
    conn.close()

    matched_drugs = []
    # 精確比對 or 模糊比對
    for row in medicines:
        drug_upper = row['name'].upper()
        if drug_upper in ocr_text:
            # 精確比對
            matched_drugs.append({
                "name": row['name'],
                "ID": row['ID'],
                "usage": row['usage'],
                "dosage": row['dosage'],
                "frequency": row['frequency'],
                "indication": row['indication']
            })
        else:
            # 模糊比對：OCR 列出文字行，取比對度最高
            best = difflib.get_close_matches(drug_upper, [l.upper() for l in lines], n=1, cutoff=0.8)
            if best:
                matched_drugs.append({
                    "name": row['name'],
                    "ID": row['ID'],
                    "usage": row['usage'],
                    "dosage": row['dosage'],
                    "frequency": row['frequency'],
                    "indication": row['indication']
                })

    # 回傳 matchedDrugs
    return jsonify({"matchedDrugs": matched_drugs}), 200


@app.route('/save', methods=['POST'])
def save_drugs():
    """
    /save 路由：
    - 接收 JSON：healthCard, matchedDrugs (List of drug dicts)
    - 取得對應使用者專屬表格 user_<healthCard>，將 matchedDrugs 一一存入
    - 回傳儲存結果
    """
    data = request.get_json()
    healthCard = data.get('healthCard')
    matchedDrugs = data.get('matchedDrugs')

    if not healthCard or matchedDrugs is None:
        return jsonify({"error": "參數不足"}), 400

    table_name = f"user_{healthCard}"

    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    try:
        for drug in matchedDrugs:
            # 逐筆插入藥物資訊，對應上面表格裡的欄位名稱
            insert_sql = f"""
            INSERT INTO `{table_name}` 
            (`drug_name`, `drug_id`, `drug_usage`, `drug_dosage`, `frequency`, `indication`)
            VALUES (%s, %s, %s, %s, %s, %s)
            """
            cursor.execute(insert_sql, (
                drug.get('name'),
                drug.get('ID'),       # 原來 medicines 表的 ID，對應到 drug_id
                drug.get('usage'),
                drug.get('dosage'),
                drug.get('frequency'),
                drug.get('indication')
            ))
        conn.commit()
    except Exception as e:
        conn.rollback()
        return jsonify({"error": f"儲存失敗：{e}"}), 500
    finally:
        cursor.close()
        conn.close()

    return jsonify({"message": "已成功儲存藥物資訊"}), 200


@app.route('/drugs', methods=['GET'])
def get_saved_drugs():
    """
    /drugs 路由：
    - 接收 QueryString 中的 healthCard
    - 從 user_<healthCard> 表中取出所有已儲存藥物，並回傳 JSON
    """
    healthCard = request.args.get('healthCard')
    if not healthCard:
        return jsonify({"error": "缺少 healthCard 參數"}), 400

    table_name = f"user_{healthCard}"
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    try:
        # 查詢全部欄位，包含掃描時間
        cursor.execute(f"SELECT * FROM `{table_name}` ORDER BY scanned_at DESC")
        rows = cursor.fetchall()
        # 回傳資料時，將欄位轉成前端易於讀取的格式
        saved_list = []
        for row in rows:
            saved_list.append({
                "drug_name": row.get('drug_name'),
                "ID": row.get('drug_id'),             # 用 drug_id 代替原本的 ID
                "usage": row.get('drug_usage'),
                "dosage": row.get('drug_dosage'),
                "frequency": row.get('frequency'),
                "indication": row.get('indication'),
                "scanned_at": row.get('scanned_at').strftime("%Y-%m-%d %H:%M:%S"),
            })
    except Exception as e:
        return jsonify({"error": f"查詢失敗：{e}"}), 500
    finally:
        cursor.close()
        conn.close()

    return jsonify({"savedDrugs": saved_list}), 200


if __name__ == '__main__':
    # 啟動 Flask 伺服器，port 可自行調整
    app.run(host='0.0.0.0', port=5000, debug=True)
